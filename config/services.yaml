# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    app_locales: ar|en|fr|de
    brochures_directory: '%kernel.project_dir%/public/uploads/users/images'
    app.notifications.email_sender: info@ramyworld.de
    requirements.uuid: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind: # defines the scalar arguments once and apply them to any service defined/created in this file
            string $locales: '%app_locales%'
            string $defaultLocale: '%locale%'
            $sourceCodeDirectory: "%kernel.project_dir%/code"
            string $emailSender: '%app.notifications.email_sender%'
            $environment: '%kernel.environment%'
            $databaseHealthHistoryDays: '%env(int:DATABASE_HEALTH_HISTORY_DAYS)%'
            $databaseLogLoginHistoryDays: '%env(int:DATABASE_LOG_LOGIN_HISTORY_DAYS)%'
            $databaseLogRequestHistoryDays: '%env(int:DATABASE_LOG_REQUEST_HISTORY_DAYS)%'
            $elasticNumberOfShards: '%env(int:ELASTICSEARCH_NUMBER_OF_SHARDS)%'
            $elasticNumberOfReplicas: '%env(int:ELASTICSEARCH_NUMBER_OF_REPLICAS)%'
            $lockUserOnLoginFailureAttempts: '%env(int:LOCK_USER_ON_LOGIN_FAILURE_ATTEMPTS)%'

    _instanceof:
        App\General\Application\Rest\Interfaces\RestResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\RestSmallResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\BaseRestResourceInterface:
            calls:
                -   setValidator: [ '@validator' ]
        AutoMapperPlus\MapperInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\EventDispatcher\EventSubscriberInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\HttpKernel\Controller\ArgumentValueResolverInterface:
            tags: [ 'app.stopwatch' ]
        App\General\Application\Utils\Interfaces\MailSenderInterface:
            calls:
                -   setMailerService: [ '@App\General\Domain\Service\Interfaces\MailerServiceInterface', '%env(resolve:APP_SENDER_EMAIL)%', '%env(resolve:APP_ERROR_RECEIVER_EMAIL)%', '%env(int:APP_EMAIL_NOTIFICATION_ABOUT_ERROR)%' ]
                -   setTwig: [ '@twig' ]

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/*/DataFixtures/'
            - '../src/DependencyInjection/'
            - '../src/*/Domain/Entity/'
            - '../src/*/Transport/EventListener/'
            - '../src/Kernel.php'
            - '../src/**/Application/Command/*'
            - '../src/**/Application/Query/*'
            - '../src/**/Mapping/*'
            - '../src/**/Exception/*'
            - '../src/**/ValueObject/*'
            - '../src/Tests/'


    Gedmo\Timestampable\TimestampableListener:
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    Gedmo\Blameable\BlameableListener:
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class

    App\Frontend\Infrastructure\Service\Interfaces\MessageServiceInterface:
        class: App\Frontend\Infrastructure\Service\MessageService

    App\Frontend\Infrastructure\Service\FileUploader:
        arguments:
            $targetDirectory: '%brochures_directory%'

    App\Blog\Transport\EventSubscriber\CommentNotificationSubscriber:
        $sender: '%app.notifications.email_sender%'

    App\General\Transport\ValueResolver\EntityValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 150 }

    App\Log\Application\Service\RequestLoggerService:
        arguments:
            $sensitiveProperties: '%env(json:REQUEST_LOG_SENSITIVE_PROPERTIES)%'

    App\General\Application\Resource\ResourceCollection:
        arguments: [ !tagged app.rest.resource ]

    App\General\Transport\EventSubscriber\RequestLogSubscriber:
        arguments:
            $ignoredRoutes: '%env(json:REQUEST_LOG_IGNORED_ROUTES)%'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Symfony\Bridge\Twig\Extension\HttpFoundationExtension: '@twig.extension.httpfoundation'
    Symfony\Bridge\Twig\Extension\AssetExtension: '@twig.extension.assets'

when@dev:
    services:
        _defaults:
            autowire: true
            autoconfigure: true

        App\Blog\Infrastructure\DataFixtures\:
            resource: '../src/Blog/Infrastructure/DataFixtures/*'
            tags: [ 'doctrine.fixture.orm' ]

        App\Quiz\:
            resource: '../src/Quiz/*/DataFixtures/*'
            tags: [ 'doctrine.fixture.orm' ]
when@test:
    services:
        _defaults:
            autowire: true
            autoconfigure: true
            public: true

        App\DataFixtures\:
            resource: '../src/*/DataFixtures/*'
            tags: [ 'doctrine.fixture.orm' ]
